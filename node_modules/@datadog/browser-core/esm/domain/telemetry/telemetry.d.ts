import type { Context } from '../../tools/context';
import type { Configuration } from '../configuration';
import type { StackTrace } from '../tracekit';
import { Observable } from '../../tools/observable';
import type { TelemetryEvent } from './telemetryEvent.types';
declare const enum StatusType {
    debug = "debug",
    error = "error"
}
export interface Telemetry {
    setContextProvider: (provider: () => Context) => void;
    observable: Observable<TelemetryEvent & Context>;
}
export interface RawTelemetryEvent extends Context {
    message: string;
    status: StatusType;
    error?: {
        kind?: string;
        stack: string;
    };
}
export declare function startTelemetry(configuration: Configuration): Telemetry;
export declare function startFakeTelemetry(): RawTelemetryEvent[];
export declare function resetTelemetry(): void;
/**
 * Avoid mixing telemetry events from different data centers
 * but keep replicating staging events for reliability
 */
export declare function isTelemetryReplicationAllowed(configuration: Configuration): boolean;
export declare function addTelemetryDebug(message: string, context?: Context): void;
export declare function addTelemetryError(e: unknown): void;
export declare function formatError(e: unknown): {
    error: {
        kind: string | undefined;
        stack: string;
    };
    message: string;
} | {
    error: {
        stack: string;
        kind?: undefined;
    };
    message: string;
};
export declare function scrubCustomerFrames(stackTrace: StackTrace): StackTrace;
export {};
