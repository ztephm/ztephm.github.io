import { cssEscape, elementMatches } from '@datadog/browser-core';
/**
 * Stable attributes are attributes that are commonly used to identify parts of a UI (ex:
 * component). Those attribute values should not be generated randomly (hardcoded most of the time)
 * and stay the same across deploys. They are not necessarily unique across the document.
 */
var STABLE_ATTRIBUTES = [
    'data-dd-action-name',
    // Common test attributes (list provided by google recorder)
    'data-testid',
    'data-test',
    'data-qa',
    'data-cy',
    'data-test-id',
    'data-qa-id',
    'data-testing',
    // FullStory decorator attributes:
    'data-component',
    'data-element',
    'data-source-file',
];
export function getSelectorsFromElement(element, actionNameAttribute) {
    var attributeSelectors = getStableAttributeSelectors();
    if (actionNameAttribute) {
        attributeSelectors = [function (element) { return getAttributeSelector(actionNameAttribute, element); }].concat(attributeSelectors);
    }
    return {
        selector: getSelectorFromElement(element, attributeSelectors.concat(getIDSelector), attributeSelectors.concat(getClassSelector)),
    };
}
function isGeneratedValue(value) {
    // To compute the "URL path group", the backend replaces every URL path parts as a question mark
    // if it thinks the part is an identifier. The condition it uses is to checks whether a digit is
    // present.
    //
    // Here, we use the same strategy: if a the value contains a digit, we consider it generated. This
    // strategy might be a bit naive and fail in some cases, but there are many fallbacks to generate
    // CSS selectors so it should be fine most of the time. We might want to allow customers to
    // provide their own `isGeneratedValue` at some point.
    return /[0-9]/.test(value);
}
function getSelectorFromElement(targetElement, globallyUniqueSelectorStrategies, uniqueAmongChildrenSelectorStrategies) {
    var targetElementSelector = [];
    var element = targetElement;
    while (element && element.nodeName !== 'HTML') {
        var globallyUniqueSelector = findSelector(element, globallyUniqueSelectorStrategies, isSelectorUniqueGlobally);
        if (globallyUniqueSelector) {
            targetElementSelector.unshift(globallyUniqueSelector);
            break;
        }
        var uniqueSelectorAmongChildren = findSelector(element, uniqueAmongChildrenSelectorStrategies, isSelectorUniqueAmongChildren);
        if (uniqueSelectorAmongChildren) {
            targetElementSelector.unshift(uniqueSelectorAmongChildren);
        }
        else {
            targetElementSelector.unshift(getPositionSelector(element));
        }
        element = element.parentElement;
    }
    return targetElementSelector.join('>');
}
function getIDSelector(element) {
    if (element.id && !isGeneratedValue(element.id)) {
        return "#".concat(cssEscape(element.id));
    }
}
function getClassSelector(element) {
    if (element.tagName === 'BODY') {
        return;
    }
    if (element.classList.length > 0) {
        for (var i = 0; i < element.classList.length; i += 1) {
            var className = element.classList[i];
            if (isGeneratedValue(className)) {
                continue;
            }
            return "".concat(element.tagName, ".").concat(cssEscape(className));
        }
    }
}
var stableAttributeSelectorsCache;
function getStableAttributeSelectors() {
    if (!stableAttributeSelectorsCache) {
        stableAttributeSelectorsCache = STABLE_ATTRIBUTES.map(function (attribute) { return function (element) { return getAttributeSelector(attribute, element); }; });
    }
    return stableAttributeSelectorsCache;
}
function getAttributeSelector(attributeName, element) {
    if (element.hasAttribute(attributeName)) {
        return "".concat(element.tagName, "[").concat(attributeName, "=\"").concat(cssEscape(element.getAttribute(attributeName)), "\"]");
    }
}
function getPositionSelector(element) {
    var parent = element.parentElement;
    var sibling = parent.firstElementChild;
    var currentIndex = 0;
    var elementIndex;
    while (sibling) {
        if (sibling.tagName === element.tagName) {
            currentIndex += 1;
            if (sibling === element) {
                elementIndex = currentIndex;
            }
            if (elementIndex !== undefined && currentIndex > 1) {
                // Performance improvement: avoid iterating over all children, stop as soon as we are sure
                // the element is not alone
                break;
            }
        }
        sibling = sibling.nextElementSibling;
    }
    return currentIndex === 1 ? element.tagName : "".concat(element.tagName, ":nth-of-type(").concat(elementIndex, ")");
}
function findSelector(element, selectorGetters, predicate) {
    for (var _i = 0, selectorGetters_1 = selectorGetters; _i < selectorGetters_1.length; _i++) {
        var selectorGetter = selectorGetters_1[_i];
        var selector = selectorGetter(element);
        if (selector && predicate(element, selector)) {
            return selector;
        }
    }
}
function isSelectorUniqueGlobally(element, selector) {
    return element.ownerDocument.body.querySelectorAll(selector).length === 1;
}
function isSelectorUniqueAmongChildren(element, selector) {
    for (var i = 0; i < element.parentElement.children.length; i++) {
        var sibling = element.parentElement.children[i];
        if (sibling !== element && elementMatches(sibling, selector)) {
            return false;
        }
    }
    return true;
}
//# sourceMappingURL=getSelectorsFromElement.js.map